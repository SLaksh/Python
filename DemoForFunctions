# Python program to illustrate  *args for variable number of arguments
 
 
def myFun(*argv):
    for arg in argv:
        print(arg)
 
myFun('Hello', 'Welcome', 'to', 'Python', 'Programming')

# Python program to illustrate  *kargs for variable number of keyword arguments
 
def myFun(**kwargs):
    for key, value in kwargs.items():
        print("%s == %s" % (key, value))
 
# Driver code
myFun(first='You', mid='are', last='the', next = 'God', next1= 'Chosen', next2='Child')

# Anonymous Function with Lamba demo
def cube(x): return x*x*x
cube1 = lambda x : x*x*x
 
print(cube(7))
print

# A Simple Python program to demonstrate working of yield
  
# A generator function that yields 1 for the first time, 2 second time and 3 third time
def simpleGeneratorFun():
    yield 1
    yield 2
    yield 3
  
#  Code to check above generator function
for value in simpleGeneratorFun(): 
    print(value)
    
#  *********Another example for YIELD
def nextSquare():
    i = 1
  
    # An Infinite loop to generate squares 
    while True:
        yield i*i                
        i += 1  # Next execution resumes 
                # from this point     
  
for num in nextSquare():
    if num > 100:
         break    
    print(num)
    
# A Python program to demonstrate use of generator object with next() 
  
# A generator function
def simpleGeneratorFun():
    yield 1
    yield 2
    yield 3
   
# x is a generator object
x = simpleGeneratorFun()
  
# Iterating over the generator object using next
print(x.__next__()) # In Python 3, __next__()
print(x.__next__())
print(x.__next__())

# A simple generator for Fibonacci Numbers
def fib(limit):
      
    # Initialize first two Fibonacci Numbers 
    a, b = 0, 1
  
    # One by one yield next Fibonacci Number
    while a < limit:
        yield a
        a, b = b, a + b
  
# Create a generator object
x = fib(5)
  
# Iterating over the generator object using for in loop.
print("\nUsing for in loop")
for i in fib(10): 
    print(i)
